# -*- coding: utf-8 -*-
"""Lf_updated.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TnBx5AK-xBCdDkN1wm36tUdDrGXcebou
"""

from google.colab import drive
import pandas as pd

drive.mount('/content/drive')

# Load prices.csv into a pandas dataframe
prices_df = pd.read_csv('/content/drive/MyDrive/archive/prices.csv')

# Load prices-split-adjusted.csv into a pandas dataframe
df = pd.read_csv('/content/drive/MyDrive/prices-split-adjusted.csv')

# Load securities.csv into a pandas dataframe
securities_df = pd.read_csv('/content/drive/MyDrive/archive/securities.csv')

# Load fundamentals.csv into a pandas dataframe
fundamentals_df = pd.read_csv('/content/drive/MyDrive/archive/fundamentals.csv')

# Convert the date column to datetime format
df['date'] = pd.to_datetime(df['date'])

# Find the first and last dates in the dataset
start_date = df['date'].min()
end_date = df['date'].max()

# Filter the dataset to include only the rows with the first and last dates
start_df = df[df['date'] == start_date]
end_df = df[df['date'] == end_date]

# Merge the start and end dataframes to get the prices for the first and last dates
merged_df = pd.merge(start_df, end_df, on='symbol', suffixes=('_start', '_end'))

# Calculate the percentage increase in price during the absolute time period
merged_df['price_increase'] = (merged_df['close_end'] - merged_df['close_start']) / merged_df['close_start'] * 100

# Sort the stocks based on percentage increase in descending order
top_performing_stocks = merged_df.sort_values(by='price_increase', ascending=False)

# Display the top performing stocks
print(top_performing_stocks[['symbol', 'price_increase']].head(10))